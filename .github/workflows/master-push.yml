# Builds pushes and merges on develop branch
name: Master branch build, test, deploy

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.5.0
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/cache@v2
        name: Cache gradle dependencies
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Set short git commit SHA
        id: vars
        run: echo "::set-output name=sha_short::$(./gradlew printCommitSha | grep COMMIT | cut -d":" -f2)"

      - uses: actions/cache@v2
        name: Cache NPM dependencies
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Build project backend and frontend (monolith) and run tests
        run: ./gradlew clean syncNpm test bootJar

      - name: Build docker image for DEMO
        run: |
          ./gradlew clean syncNpm syncJar buildImage
          docker save -o project-control.img project-control/project-control:${{ steps.vars.outputs.sha_short }}

      - name: Copy docker-image to DEMO
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DEMO_HOST }}
          username: ${{ secrets.DEMO_USERNAME }}
          key: ${{ secrets.DEMO_CI_CD_PRIVATE_KEY }}
          source: "project-control.img"
          target: "apps"
          overwrite: true

      - name: Deploy new docker image on DEMO
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEMO_HOST }}
          username: ${{ secrets.DEMO_USERNAME }}
          key: ${{ secrets.DEMO_CI_CD_PRIVATE_KEY }}
          script: |
            docker load -i apps/project-control.img
            echo "export PROJECT_CONTROL_LATEST=${{ steps.vars.outputs.sha_short }}" > ./project-control-version.sh
            . ./all-env.sh
            docker stack deploy --compose-file docker-compose.yml base-demo
